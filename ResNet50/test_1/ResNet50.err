Loaded dependency [python3/3.9.6]: gcc/10.3.0-binutils-2.36.1
Loaded module: python3/3.9.6

Loading python3/3.9.6
  Loading requirement: gcc/10.3.0-binutils-2.36.1
Loaded module: cuda/11.5
Loaded module: cudnn/v8.3.0.98-prod-cuda-11.5
Loaded dependency [numpy/1.21.1-python-3.9.6-openblas-0.3.17]: openblas/0.3.17
Loaded dependency [matplotlib/3.4.2-numpy-1.21.1-python-3.9.6]: numpy/1.21.1-python-3.9.6-openblas-0.3.17
Loaded module: matplotlib/3.4.2-numpy-1.21.1-python-3.9.6

Loading matplotlib/3.4.2-numpy-1.21.1-python-3.9.6
  Loading requirement: openblas/0.3.17 numpy/1.21.1-python-3.9.6-openblas-0.3.17
Traceback (most recent call last):
  File "/zhome/45/c/128687/DeepLearning/ResNet50/Training.py", line 119, in <module>
    output = net(input) # I think only training the batch we are looking at 
  File "/zhome/45/c/128687/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/zhome/45/c/128687/DeepLearning/ResNet50/ResNet.py", line 90, in forward
    x = self.layer1(x)
  File "/zhome/45/c/128687/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/zhome/45/c/128687/.local/lib/python3.9/site-packages/torch/nn/modules/container.py", line 141, in forward
    input = module(input)
  File "/zhome/45/c/128687/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/zhome/45/c/128687/DeepLearning/ResNet50/ResNet.py", line 51, in forward
    x = self.bn1(x)
  File "/zhome/45/c/128687/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/zhome/45/c/128687/.local/lib/python3.9/site-packages/torch/nn/modules/batchnorm.py", line 158, in forward
    if self.training:
KeyboardInterrupt
Loaded dependency [python3/3.9.6]: gcc/10.3.0-binutils-2.36.1
Loaded module: python3/3.9.6

Loading python3/3.9.6
  Loading requirement: gcc/10.3.0-binutils-2.36.1
Loaded module: cuda/11.5
Loaded module: cudnn/v8.3.0.98-prod-cuda-11.5
Loaded dependency [numpy/1.21.1-python-3.9.6-openblas-0.3.17]: openblas/0.3.17
Loaded dependency [matplotlib/3.4.2-numpy-1.21.1-python-3.9.6]: numpy/1.21.1-python-3.9.6-openblas-0.3.17
Loaded module: matplotlib/3.4.2-numpy-1.21.1-python-3.9.6

Loading matplotlib/3.4.2-numpy-1.21.1-python-3.9.6
  Loading requirement: openblas/0.3.17 numpy/1.21.1-python-3.9.6-openblas-0.3.17
Traceback (most recent call last):
  File "/zhome/45/c/128687/DeepLearning/ResNet50/Training.py", line 169, in <module>
    plt.plot(epoch, train_acc, 'r', epoch, valid_acc, 'b', epoch, train_losses, 'm')
  File "/appl/matplotlib/3.4.2-numpy-1.21.1-python-3.9.6/lib/python3.9/site-packages/matplotlib-3.4.2-py3.9-linux-x86_64.egg/matplotlib/pyplot.py", line 3019, in plot
    return gca().plot(
  File "/appl/matplotlib/3.4.2-numpy-1.21.1-python-3.9.6/lib/python3.9/site-packages/matplotlib-3.4.2-py3.9-linux-x86_64.egg/matplotlib/axes/_axes.py", line 1605, in plot
    lines = [*self._get_lines(*args, data=data, **kwargs)]
  File "/appl/matplotlib/3.4.2-numpy-1.21.1-python-3.9.6/lib/python3.9/site-packages/matplotlib-3.4.2-py3.9-linux-x86_64.egg/matplotlib/axes/_base.py", line 315, in __call__
    yield from self._plot_args(this, kwargs)
  File "/appl/matplotlib/3.4.2-numpy-1.21.1-python-3.9.6/lib/python3.9/site-packages/matplotlib-3.4.2-py3.9-linux-x86_64.egg/matplotlib/axes/_base.py", line 501, in _plot_args
    raise ValueError(f"x and y must have same first dimension, but "
ValueError: x and y must have same first dimension, but have shapes (21,) and (0,)
