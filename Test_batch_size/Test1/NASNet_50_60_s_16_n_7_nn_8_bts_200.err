Loaded dependency [python3/3.9.6]: gcc/10.3.0-binutils-2.36.1
Loaded module: python3/3.9.6

Loading python3/3.9.6
  Loading requirement: gcc/10.3.0-binutils-2.36.1
Loaded module: cuda/11.5
Loaded module: cudnn/v8.3.0.98-prod-cuda-11.5
Loaded dependency [numpy/1.21.1-python-3.9.6-openblas-0.3.17]: openblas/0.3.17
Loaded dependency [matplotlib/3.4.2-numpy-1.21.1-python-3.9.6]: numpy/1.21.1-python-3.9.6-openblas-0.3.17
Loaded module: matplotlib/3.4.2-numpy-1.21.1-python-3.9.6

Loading matplotlib/3.4.2-numpy-1.21.1-python-3.9.6
  Loading requirement: openblas/0.3.17 numpy/1.21.1-python-3.9.6-openblas-0.3.17
Traceback (most recent call last):
  File "/zhome/45/c/128687/DeepLearning/NASNet/Test_batch_size/Training.py", line 275, in <module>
    losses[i] = TrainNN(layers=ResNets_layers[i]) # losses is an list of n elements (10)
  File "/zhome/45/c/128687/DeepLearning/NASNet/Test_batch_size/Training.py", line 78, in TrainNN
    target_batch = Variable(get_variable(targets_train[slce])) # Finding the targets for the current batch/slice
  File "/zhome/45/c/128687/DeepLearning/NASNet/Test_batch_size/Training.py", line 28, in get_variable
    return x.cuda()
KeyboardInterrupt
Loaded dependency [python3/3.9.6]: gcc/10.3.0-binutils-2.36.1
Loaded module: python3/3.9.6

Loading python3/3.9.6
  Loading requirement: gcc/10.3.0-binutils-2.36.1
Loaded module: cuda/11.5
Loaded module: cudnn/v8.3.0.98-prod-cuda-11.5
Loaded dependency [numpy/1.21.1-python-3.9.6-openblas-0.3.17]: openblas/0.3.17
Loaded dependency [matplotlib/3.4.2-numpy-1.21.1-python-3.9.6]: numpy/1.21.1-python-3.9.6-openblas-0.3.17
Loaded module: matplotlib/3.4.2-numpy-1.21.1-python-3.9.6

Loading matplotlib/3.4.2-numpy-1.21.1-python-3.9.6
  Loading requirement: openblas/0.3.17 numpy/1.21.1-python-3.9.6-openblas-0.3.17
Traceback (most recent call last):
  File "/zhome/45/c/128687/DeepLearning/NASNet/Test_batch_size/Training.py", line 272, in <module>
    layers, index = choose_layers(b,l)
  File "/zhome/45/c/128687/DeepLearning/NASNet/Test_batch_size/Training.py", line 144, in choose_layers
    index.append(np.random.choice(numbers,p=b[i]))
  File "mtrand.pyx", line 935, in numpy.random.mtrand.RandomState.choice
ValueError: probabilities contain NaN
